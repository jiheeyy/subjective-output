import cv2
import numpy as np
import imutils
import dlib
from imutils import face_utils
from numpy import savetxt

# initialize dlib's face detector (HOG-based) and then create
# the facial landmark predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')

# load the input image, resize it, and convert it to grayscale
start = 0
end = 7066

nanshape = np.empty((68*(end-start),3))
nanshape[:] = np.nan

for c in range(start,end):
  image = cv2.imread('test' + str(c) + '.jpeg')
  image = imutils.resize(image, width=500)
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# detect faces in the grayscale image
  rects = detector(gray, 1)

# loop over the face detections
  for (i, rect) in enumerate(rects):
    # determine the facial landmarks for the face region, then
    # convert the facial landmark (x, y)-coordinates to a NumPy
    # array
    shape = predictor(gray, rect)
    try:
      shape = face_utils.shape_to_np(shape)
      full = np.full((68, 1), c, dtype=int)
      fullshape = np.hstack((full, shape))
      nanshape[0 + (68 * abs(start - c)):68 + (68 * abs(start - c)), 0:3] = fullshape
    except NameError:
      pass

savetxt('test_coord.csv', nanshape, delimiter=',')
